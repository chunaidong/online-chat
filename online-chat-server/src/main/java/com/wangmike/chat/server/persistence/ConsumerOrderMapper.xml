<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wangmike.chat.server.persistence.ConsumerOrderMapper">

  <resultMap id="BaseResultMap" type="com.wangmike.chat.common.entity.ConsumerOrder">
    <id column="order_id" jdbcType="VARCHAR" property="orderId" />
    <result column="order_state" jdbcType="VARCHAR" property="orderState" />
    <result column="consumer_id" jdbcType="VARCHAR" property="consumerId" />
    <result column="provider_id" jdbcType="VARCHAR" property="providerId" />
    <result column="provider_type" jdbcType="VARCHAR" property="providerType" />
    <result column="provider_time" jdbcType="VARCHAR" property="providerTime" />
    <result column="order_amount" jdbcType="DECIMAL" property="orderAmount" />
    <result column="order_time" jdbcType="TIMESTAMP" property="orderTime" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
    <result column="receive_time" jdbcType="TIMESTAMP" property="receiveTime" />
    <result column="expact_start_time" jdbcType="TIMESTAMP" property="expactStartTime" />
    <result column="start_chat_time" jdbcType="TIMESTAMP" property="startChatTime" />
    <result column="confirm_start_chat_time" jdbcType="TIMESTAMP" property="confirmStartChatTime" />
    <result column="order_finish_time" jdbcType="TIMESTAMP" property="orderFinishTime" />
    <result column="close_time" jdbcType="TIMESTAMP" property="closeTime" />
    <result column="close_reason" jdbcType="VARCHAR" property="closeReason" />
    <result column="billing_state" jdbcType="VARCHAR" property="billingState" />
  </resultMap>
  <sql id="Base_Column_List">
    order_id, order_state, consumer_id, provider_id, provider_type, provider_time, order_amount,
    order_time, pay_time, receive_time, expact_start_time, start_chat_time, confirm_start_chat_time,
    order_finish_time, close_time, close_reason, billing_state
  </sql>

    <insert id="insert" parameterType="com.wangmike.chat.common.entity.ConsumerOrder">
    insert into consumer_order (order_id, order_state, consumer_id,
      provider_id, provider_type, provider_time,
      order_amount, order_time, pay_time,
      receive_time, expact_start_time, start_chat_time,
      confirm_start_chat_time, order_finish_time,
      close_time, close_reason, billing_state
      )
    values (#{orderId,jdbcType=VARCHAR}, #{orderState,jdbcType=VARCHAR}, #{consumerId,jdbcType=VARCHAR},
      #{providerId,jdbcType=VARCHAR}, #{providerType,jdbcType=VARCHAR}, #{providerTime,jdbcType=VARCHAR},
      #{orderAmount,jdbcType=DECIMAL}, #{orderTime,jdbcType=TIMESTAMP}, #{payTime,jdbcType=TIMESTAMP},
      #{receiveTime,jdbcType=TIMESTAMP}, #{expactStartTime,jdbcType=TIMESTAMP}, #{startChatTime,jdbcType=TIMESTAMP},
      #{confirmStartChatTime,jdbcType=TIMESTAMP}, #{orderFinishTime,jdbcType=TIMESTAMP},
      #{closeTime,jdbcType=TIMESTAMP}, #{closeReason,jdbcType=VARCHAR}, #{billingState,jdbcType=VARCHAR}
      )
  </insert>

  <select id="queryOrderById" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from consumer_order
    where order_id = #{orderId,jdbcType=VARCHAR}
    for update
  </select>

  <update id="closeOrderById" parameterType="string">
      update consumer_order
      set order_state = '5',
      close_time = now(),
      close_reason ='超时服务员未接单'
      where order_id = #{orderId}
  </update>

  <select id="getConsumerOrderList" parameterType="com.wangmike.chat.common.request.ConsumerOrderListRequest"
          resultType="com.wangmike.chat.common.response.ProviderResponseForOrderList">
    select
        co.provider_id as providerId,
        pro.provider_nick_name as providerNickName,
        pro.provider_age as providerAge,
        pro.provider_sex as providerSex,
        pro.provider_content as providerContent,
        pro.provider_raw_wechat_no as providerRawWechatNo,
        co.order_state as orderState,
        co.provider_time as providerTime,
        pt.type_name as providerType,
        co.order_id as orderId
      from
      consumer_order co
      inner join
       provider pro
       on pro.provider_id = co.provider_id
      inner join
       provider_type pt
       on co.provider_type = pt.type_id
      where co.consumer_id = #{openId}
      <if test="type != null and type != 'ALL'">
        and order_state = #{type}
      </if>
      order by co.order_time desc

  </select>

    <select id="queryCount" parameterType="string" resultType="map">
        select
            IFNULL(sum(case when co.order_state = '0' then 1 else 0 end),0) as accessCount,
            IFNULL(sum(case when co.order_state = '1' then 1 else 0 end),0) as chatCount,
            IFNULL(sum(case when co.order_state = '3' then 1 else 0 end),0) as chatingCount
          from
           consumer_order co
           where
           co.consumer_id = #{openId}
    </select>

    <select id="getAllMarkedList" resultType="com.wangmike.chat.common.response.ProviderResponseForList"
            parameterType="com.wangmike.chat.common.request.MarkedRequest">

     select
        pro.provider_id as providerId,
        pro.provider_nick_name as providerNickName,
        pro.provider_age as providerAge,
        pro.provider_sex as providerSex,
        pro.provider_level as providerLevel,
        pro.provider_content as providerContent,
        <choose>
            <when test="consumerLoginLat !=null">
                (
                6371 * acos(
                cos( radians( #{consumerLoginLat} ) ) * cos( radians( pro.provider_last_login_lat ) ) * cos( radians( pro.provider_last_login_lng )
                - radians( #{consumerLoginLng} ) ) + sin( radians( #{consumerLoginLat} ) ) * sin( radians( pro.provider_last_login_lat ) )
                )
                ) AS distance
            </when>
            <otherwise>
               0.00 as distance
            </otherwise>
        </choose>
        from consumer_collection cc
         inner join provider pro
          on cc.provider_id = pro.provider_id
          where cc.consumer_id = #{openId}

    </select>

    <update id="updateOrderState" parameterType="com.wangmike.chat.common.entity.ConsumerOrder">
         update consumer_order
         set order_state = '4',
         order_finish_time = now()
         where order_id = #{orderId}
    </update>

    <select id="getOrderTime" resultType="string" parameterType="string">
        select provider_time from consumer_order where order_id = #{orderId}
    </select>

    <update id="incTotal">
        update type_collection set
        total = total + 1
        where provider_id = #{providerId}
        and type_id = #{providerType}
    </update>

    <select id="getAllOrderList" resultType="com.wangmike.chat.common.response.OrderForAdminResponse">
        select
        co.order_id as orderId,
        con.consumer_nick_name as consumerName,
        pro.provider_nick_name as providerName,
        co.order_state as orderState,
        co.provider_time as orderCount,
        pt.type_name as typeName,
        co.order_amount as orderAmount,
        co.order_time as orderDate,
        co.confirm_start_chat_time as startDate
        from
        consumer_order co
        inner join
        provider pro
        on pro.provider_id = co.provider_id
        inner join
        provider_type pt
        on co.provider_type = pt.type_id
        inner join
        consumer con
        on con.consumer_id = co.consumer_id
        order by co.order_time desc

    </select>



</mapper>